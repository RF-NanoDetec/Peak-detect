"""
Peak Analysis Tool
=================

A comprehensive software package for analyzing signal data with focus on peak detection 
and analysis. Provides both GUI and programmatic interfaces.

Installation
-----------
# Clone the repository
git clone https://github.com/yourusername/peak_analysis_tool.git

# Install dependencies
pip install -r requirements.txt

Requirements
-----------
- Python 3.8+
- NumPy
- SciPy
- Pandas
- Matplotlib
- Seaborn
- Tkinter
- Numba

Basic Usage
----------
# Starting the application
python -m peak_analysis              # Normal mode
python -m peak_analysis --debug      # Debug mode
python -m peak_analysis --config config.json  # Custom config

Basic Workflow
-------------
1. Load Data:
   - Single file mode: Select individual data file
   - Batch mode: Select multiple files or directory

2. Configure Parameters:
   - Signal Processing:
     * Filter type (Butterworth, Savitzky-Golay)
     * Cutoff frequency
     * Filter order
   - Peak Detection:
     * Height threshold
     * Minimum distance
     * Peak width range
     * Prominence

3. Run Analysis:
   - Process signal
   - Detect peaks
   - View results
   - Export data

Module Structure
---------------
1. Main Application (main.py)
   Main entry point for the application.
   - init_directories(): Create necessary directories
   - check_dependencies(): Verify required packages
   - run_application(): Start the GUI application

2. Configuration (config.py)
   Configuration settings and constants.
   Classes:
   - Config: Main configuration class
   - SystemConfig: System-wide settings
   - GuiConfig: GUI-specific settings
   - PlotConfig: Plotting parameters
   - AnalysisConfig: Analysis parameters

3. Data Processing (data_processing.py)
   Data loading and processing functionality.
   Classes:
   - DataProcessor: Main data processing class
   - DataPoint: Single data point container
   - ProcessedData: Processed data container
   Features:
   - File loading (various formats)
   - Data validation
   - Batch processing
   - Data export

4. Peak Detection (peak_detection.py)
   Peak detection and analysis algorithms.
   Classes:
   - PeakDetector: Main peak detection class
   - Peak: Peak information container
   Features:
   - Multiple detection algorithms
   - Peak characterization
   - Statistical analysis
   - Cluster detection

5. Signal Processing (signal_processing.py)
   Signal processing and filtering.
   Classes:
   - SignalProcessor: Main signal processing class
   - FilterParameters: Filter configuration
   Features:
   - Butterworth filtering
   - Savitzky-Golay filtering
   - Baseline correction
   - SNR calculation

6. GUI Package (gui/)
   6.1 Application (gui/application.py)
       Main application window and logic.
       Classes:
       - Application: Main GUI application
       - AnalysisTab: Analysis interface
       - ResultsTab: Results display

   6.2 Plots (gui/plots.py)
       Visualization components.
       Classes:
       - PlotManager: Plot handling and updates
       - SignalPlot: Signal visualization
       - PeakPlot: Peak marking
       - StatisticsPlot: Statistical displays

   6.3 Widgets (gui/widgets.py)
       Custom GUI elements.
       Classes:
       - ParameterFrame: Parameter input
       - StatusBar: Status display
       - FileSelector: File selection
       - ProgressBar: Progress indication

7. Utilities (utils.py)
   Helper functions and decorators.
   Features:
   - Performance profiling
   - Logging setup
   - Data caching
   - Input validation

Example Code
-----------
# Basic Analysis
from peak_analysis.data_processing import DataProcessor
from peak_analysis.peak_detection import PeakDetector
from peak_analysis.signal_processing import SignalProcessor

# Create processors
data_proc = DataProcessor()
signal_proc = SignalProcessor()
peak_detector = PeakDetector()

# Load and process data
data = data_proc.load_file("data.txt")
filtered_signal = signal_proc.apply_butterworth_filter(data)
peaks = peak_detector.find_peaks(filtered_signal)

# Export results
data_proc.export_results(peaks, "results.csv")

# GUI Usage
from peak_analysis.gui.application import Application

# Start application
app = Application()
app.mainloop()

Configuration
------------
Example config.json:
{
    "system": {
        "max_workers": 4,
        "log_level": "INFO"
    },
    "gui": {
        "theme": "clam",
        "window_size": [1920, 1080]
    },
    "analysis": {
        "default_filter": "butterworth",
        "min_peak_distance": 30,
        "min_peak_height": 0.5
    }
}

Error Handling
-------------
The application includes comprehensive error handling:
- Input validation
- File format checking
- Parameter validation
- Exception logging
- User-friendly error messages

Performance Considerations
------------------------
- Numba optimization for computationally intensive operations
- Parallel processing for batch operations
- Memory management for large datasets
- Caching of intermediate results

Contributing
-----------
1. Fork the repository
2. Create a feature branch
3. Make changes
4. Submit pull request

License
-------
MIT License - see LICENSE file for details.

Version: 1.0.0
Author: Lucjan & Silas
"""

# Version and author information
__version__ = '1.0.0'
__author__ = 'Lucjan & Silas'
__license__ = 'MIT'
